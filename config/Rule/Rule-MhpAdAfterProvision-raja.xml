<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule created="1712812465929" id="c0a800918ecb14a6818ecb941f09009c" language="beanshell" modified="1713182683691" name="MHP AD After Provision-Raja" type="AfterProvisioning">
  <Description>An IdentityIQ server-side rule that is executed after the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan AFTER it has been sent out to the specific applications. This rule will be called for any application found in a plan that also has a configured 'afterProvisioningRule'
    configured.</Description>
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule" id="c0a800918ecb14a6818eccd57edc030f" name="MHP Identity Attribute Rule Library"/>
  </ReferencedRules>
  <Signature>
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="plan">
        <Description>
          The ProvisioningPlan object on its way to the Connector.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          The application object that references this before/after script.
        </Description>
      </Argument>
      <Argument name="result">
        <Description>
          The ProvisioningResult object returned by the connectors provision method. This can be null and in many cases the connector will  not return a result and instead will annotate the plan's ProvisioningResult either at the plan or account level.        
        </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source>import sailpoint.object.Identity;
  import sailpoint.object.EmailOptions;
  import sailpoint.object.EmailTemplate;
  import sailpoint.object.EmailFileAttachment;
  import sailpoint.object.Application;
  import sailpoint.tools.Util;
  import sailpoint.object.ProvisioningPlan;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import org.apache.log4j.Logger;
  import org.apache.log4j.Level;
  import sailpoint.connector.ConnectorClassLoader;
  import sailpoint.api.Workflower;
  import sailpoint.object.WorkflowLaunch;
  import sailpoint.object.Workflow;
  import sailpoint.api.IdentityService;

  import java.util.Date;
  import sailpoint.api.RequestManager;
  import sailpoint.object.Attributes;
  import sailpoint.object.Identity;
  import sailpoint.object.Request;
  import sailpoint.object.RequestDefinition;
  import sailpoint.tools.GeneralException;
  import sailpoint.workflow.StandardWorkflowHandler;

  Logger log = Logger.getLogger("rule.mhp.AD.After.Provision");
  String ruleName = "MHP AD After Provision";

  IdentityService ids = new IdentityService(context);

  if(log.isDebugEnabled()) log.debug("***RUNNING RULE [ " + ruleName +" ] ");
  ClassLoader currentCl = Thread.currentThread().getContextClassLoader();
  ClassLoader bakcedUpCl = null;
  if(currentCl instanceof ConnectorClassLoader){
    bakcedUpCl = currentCl;
    Thread.currentThread().setContextClassLoader(currentCl.getParent());
  }

  List accReqs=plan.getAccountRequests();
  if(Util.nullSafeSize(accReqs)>0){
    for(ProvisioningPlan.AccountRequest accReq:accReqs){
      if(ProvisioningPlan.AccountRequest.Operation.Create.equals(accReq.getOperation())){
        List attrReqs=accReq.getAttributeRequests();
        String password="";
        String username="";
        if(Util.nullSafeSize(attrReqs)>0){
          for(ProvisioningPlan.AttributeRequest attrReq:attrReqs){
            if(attrReq.getName().equals("password")) password=attrReq.getValue();
            if(attrReq.getName().equals("mail")) username=attrReq.getValue();
          }
        }
        String name= plan.getIdentity().getName();
        Identity identity = context.getObjectByName(Identity.class,name);
        if(identity == null) break; 
        String mail = "";
        String type = identity.getAttribute("identityType");
        String source = identity.getAttribute("source");
        if(type != null &amp;&amp; type.equalsIgnoreCase("External")){
          mail = identity.getAttribute("externalEmail");
          Identity lead = identity.getAttribute("projectLead");
          if(lead != null &amp;&amp; lead.getEmail() != null){
           sendEmailToLead(lead.getEmail(),identity.getDisplayName(),username);
          }
          sendUserEmailToUser(identity.getAttribute("externalEmail"),username,identity.getDisplayName());
          sendPasswordToUser(identity.getDisplayName(),identity.getAttribute("externalEmail"),password);
        }
         System.out.println("mail1------------"+mail);
        String countryCode=  identity.getAttribute("countryCode");        
        if((countryCode!= null &amp;&amp; (countryCode.equalsIgnoreCase("DE") || countryCode.equalsIgnoreCase("RO"))) &amp;&amp; (type != null &amp;&amp; (type.equalsIgnoreCase("Internal") || type.equalsIgnoreCase("Student")))){
            System.out.println("Inside IF"+mail);
          String PersonalEmail = "kandulars@gmail.com"; //ids.getLinks(id,context.getObjectByName(Application.class,"AD-Application")).get(0).getAttributes().get("Personal Email");
          if(Util.isNotNullOrEmpty(PersonalEmail)){
            mail = PersonalEmail;
           
            if(countryCode.equalsIgnoreCase("DE"))
            {
              //Onboard mail to Germans
              String germanEmailTemplate = "MHP-EmailTemplate_German_Users";
              String attachmentPath = "C:\\IdentityNow\\MHP_Onboarding_Guide.pdf";
              mailSend(identity,mail,germanEmailTemplate,attachmentPath);
              //Onboard mail to Germans
              String germanInternalEmailTemplate = "MHP-EmailTemplate_Password_Email_German_Romanian_Inernal_Users";
              mailSend(identity,mail,germanInternalEmailTemplate,null);

            }else if(countryCode.equalsIgnoreCase("RO"))
            {
               System.out.println("RO mail2------------"+mail);
              String PersonalEmail = "kandulars@gmail.com"; //ids.getLinks(plan.getIdentity(),context.getObjectByName(Application.class,"SAP HR")).getAttribute("Personal Email");
              if(Util.isNotNullOrEmpty(PersonalEmail)){
                mail = PersonalEmail;
                String romanianEmailTemplate = "MHP-EmailTemplate_Romanian_and_Internal_Users";
                String attachmentPath = "C:\\IdentityNow\\MHP_Onboarding_Guide.pdf";
                mailSend(identity,mail,romanianEmailTemplate,attachmentPath);
                String germaninternalEmailTemplate = "MHP-EmailTemplate_Password_Email_German_Romanian_Inernal_Users";
                mailSend(identity,mail,germaninternalEmailTemplate,null);
              }

            }
          }
        }

        if(type != null &amp;&amp; countryCode!= null &amp;&amp; (countryCode.equalsIgnoreCase("US") || countryCode.equalsIgnoreCase("UK") || countryCode.equalsIgnoreCase("CN") )&amp;&amp; (type.equalsIgnoreCase("Internal") || type.equalsIgnoreCase("Student"))){
          if(countryCode.equalsIgnoreCase("US"))
          {
            mail="hr-services-americas@mhp.com"; 
          }
          else if(countryCode.equalsIgnoreCase("UK"))
          {
            mail="hr-services-uk@mhp.com"; 
          }
          else if(countryCode.equalsIgnoreCase("CN"))
          {
            mail="mhp-cn-helpdesk@mhp.com"; 
          }
          String usuksnMail = "MHP-EmailTemplate_Onboading_Email_for_US_UK_and_China_users";
          mailSend(identity,mail,usuksnMail,null);
        }

        //START:: Schedule AD Enable Remote Mailbox.
        
        log.debug("MHP.Rule.AfterProvisioning.ScheduleADEnableRemoteMailbox");

          String identityName=plan.getIdentity().getName();
          String nativeIdentity=accReq.getNativeIdentity();
          // String userPrincipalName= //ids.getLinks(plan.getIdentity(),context.getObjectByName(Application.class,"AD-Application")).getAttribute("userPrincipalName");
          String userPrincipalName="RajaKandula@test.eshiam.com";

          String workflowName = "MHP-WorkFlow-ScheduleADEnableRemoteMailbox";
          String caseName     = "Run '" + workflowName + "' for: " + identityName;
          String requesterId  = "spadmin";

          Workflow eventWorkflow = context.getObject(Workflow.class, workflowName);
          if (null == eventWorkflow) {
            log.error("Could not find a workflow named: " + workflowName);
            throw new GeneralException("Invalid worklfow: " + workflowName);
          }

          // Simulate the request being submitted by a user. Default: spadmin.
          Identity id = context.getObjectByName(Identity.class, requesterId);
          if (null == id) {
            log.error("Could not find a requester Identity: " + requesterId);
            throw new GeneralException("Invalid identity: " + requesterId);
          }

          // Ask the Request Processor to start the workflow 1 minutes from now.
          // Append the time stamp to the workflow case name to ensure it's unique. 
          long launchTime = System.currentTimeMillis() + (1 * 60 * 1000);
          caseName = caseName + "(" + launchTime + ")";

          // Build out a map of arguments to pass to the Request Scheduler.
          Attributes reqArgs = new Attributes();
          reqArgs.put(StandardWorkflowHandler.ARG_REQUEST_DEFINITION, sailpoint.request.WorkflowRequestExecutor.DEFINITION_NAME);
          reqArgs.put(sailpoint.workflow.StandardWorkflowHandler.ARG_WORKFLOW, workflowName);
          reqArgs.put(sailpoint.workflow.StandardWorkflowHandler.ARG_REQUEST_NAME, caseName);
          reqArgs.put( "requestName", caseName );            

          // Build a map of arguments to pass to the Workflow case when it launches.
          Attributes wfArgs = new Attributes();
          wfArgs.put("identityName",    identityName);
          wfArgs.put("nativeIdentity",    nativeIdentity);
          wfArgs.put("userPrincipalName",    userPrincipalName);
          wfArgs.put("workflow",        eventWorkflow.getName());

          reqArgs.putAll(wfArgs);

          // Use the Request Launcher to schedule the workflow reqeust.  This requires
          // a Request object to store the properties of the request item.
          Request req = new Request();
          RequestDefinition reqdef = context.getObject(RequestDefinition.class, "Workflow Request");
          req.setDefinition(reqdef);
          req.setEventDate( new Date( launchTime ) );
          req.setOwner(id);
          req.setName(caseName);
          req.setAttributes( reqdef, reqArgs );

          // Schedule the work flow via the request manager.
          RequestManager.addRequest(context, req);

          log.debug("MHP-End Step.ScheduleADEnableRemoteMailbox");



          //ENDS:: Schedule AD Enable Remote Mailbox.
       // }

      }
    }
  }

  if(bakcedUpCl != null){
    Thread.currentThread().setContextClassLoader(bakcedUpCl);
  }</Source>
</Rule>
